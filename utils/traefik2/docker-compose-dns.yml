services:
  # Traefik 2 - Reverse Proxy
  reverse-proxy:
    container_name: traefik
    image: traefik:2.10
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "853:853"
    networks:
      t2_proxy:
        ipv4_address: 10.0.2.253
      # socket_proxy:
    command:
      # CLI arguments
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.dnsovertls.address=:853
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --api.insecure=true
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      # - --providers.docker.endpoint=tcp://socket-proxy:2375 # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --entrypoints.websecure.http.tls=true
      # - --entrypoints.websecure.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.websecure.http.tls.certresolver=dns-cloudflare
      #- --entrypoints.websecure.http.tls.domains[0].main=$DOMAINNAME
      #- --entrypoints.websecure.http.tls.domains[0].sans=*.$DOMAINNAME
      # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.directory=/rules
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # LetsEncrypt Staging Server - uncomment when testing 
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesresolvers.dns-cloudflare.acme.email=$ADMINEMAIL
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      # To delay DNS check and reduce LE hitrate
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Enable if not using Socket Proxy
      - ${DOCKERDIR}/appdata/traefik2/rules:/rules # Dynamic File Provider directory
      - ${DOCKERDIR}/appdata/traefik2/acme/acme.json:/acme.json # Certs File
      - ${DOCKERDIR}/logs/traefik:/logs # Traefik logs
    environment:
      - TZ=$TZ
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf_dns_api_token
      # Passing the domain name to traefik container to be able to use the variable in rules. 
      - DOMAINNAME
      - ADMINEMAIL
    secrets:
      - cf_dns_api_token
      - basic_auth_credentials
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`$DOMAINNAME`) && Path(`/traefik`)"
      # Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      # Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file" # For Basic HTTP Authentication
